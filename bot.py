import os, asyncio
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message
from aiogram.enums import ParseMode
from aiogram.utils.chat_action import ChatActionSender
from openai import OpenAI

load_dotenv()
TG_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_KEY = os.getenv("OPENAI_API_KEY")
OPENAI_MODEL = os.getenv("OPENAI_MODEL", "gpt-4o-mini")

if not TG_TOKEN: raise RuntimeError("TELEGRAM_BOT_TOKEN –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
if not OPENAI_KEY: raise RuntimeError("OPENAI_API_KEY –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

bot = Bot(token=TG_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()
client = OpenAI(api_key=OPENAI_KEY)

SYSTEM_PROMPT = (
    "–¢—ã ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –±—Ä–µ–Ω–¥–∞ ¬´FIX FUR by ATARSHCHIKOV¬ª (–ª—é–∫—Å –º–µ—Ö–æ–≤–æ–µ –∞—Ç–µ–ª—å–µ). "
    "–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, —É–≤–µ—Ä–µ–Ω–Ω–æ, –ø–æ –¥–µ–ª—É; –ø–æ–º–æ–≥–∞–π —Å –ø–µ—Ä–µ—à–∏–≤–æ–º, —Ä–µ—Å—Ç–∞–≤—Ä–∞—Ü–∏–µ–π, —É—Ö–æ–¥–æ–º. "
    "–ï—Å–ª–∏ –Ω—É–∂–µ–Ω –æ—Ñ–ª–∞–π–Ω-–≤–∏–∑–∏—Ç ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è. –ë–µ–∑ –≤–æ–¥—ã."
)

def ask_openai_sync(text: str) -> str:
    try:
        resp = client.chat.completions.create(
            model=OPENAI_MODEL,
            messages=[
                {"role": "system", "content": SYSTEM_PROMPT},
                {"role": "user", "content": text}
            ],
            temperature=0.5,
            max_tokens=700
        )
        return resp.choices[0].message.content.strip()
    except Exception:
        return "–°–µ–π—á–∞—Å –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –∏–∑-–∑–∞ —Ç–µ—Ö. –æ—à–∏–±–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

@dp.message(F.text)
async def on_text(message: Message):
    async with ChatActionSender.typing(chat_id=message.chat.id, bot=bot):
        reply = await asyncio.to_thread(ask_openai_sync, message.text)
    await message.answer(reply)

@dp.message()
async def on_other(message: Message):
    await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å üôÇ")

async def main():
    print("Bot started.")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
